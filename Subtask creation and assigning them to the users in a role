import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.ComponentManager;
import com.atlassian.jira.issue.IssueManager;


//if the parent issue type name IS NOT X - do nothing
//if (parentIssue.getIssueTypeObject().getName() != 'Task')
  //  return

def user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
def groupManager = ComponentAccessor.getGroupManager()
def issueFactory = ComponentAccessor.getIssueFactory()
def constantManager = ComponentAccessor.getConstantsManager()
def issueManager = ComponentAccessor.getIssueManager()
def subTaskManager = ComponentAccessor.getSubTaskManager()
Issue parentIssue = issueManager.getIssueObject("DA-86");
//Issue parentIssue = issue
//get all the users who are member of the jira-developers group

def customFieldManager = ComponentAccessor.getCustomFieldManager()
def group = customFieldManager.getCustomFieldObject("customfield_10302")
def groupName = parentIssue.getCustomFieldValue(group).getName()
def developers = groupManager.getUsersInGroup(groupName)
return groupName
developers.each { developer ->
    MutableIssue newSubTask = issueFactory.getIssue()
    //newSubTask.setSummary("A summary")
    newSubTask.setParentObject(parentIssue)
    newSubTask.setProjectObject(parentIssue.getProjectObject())
    newSubTask.setIssueTypeId(constantManager.getAllIssueTypeObjects().find {
        it.getName() == "Sub-task"
    }.id)
    newSubTask.setAssignee(developer)

    // Add any other fields you want for the newly created sub task
    Map<String,Object> newIssueParams = ["issue" : newSubTask] as Map<String,Object>
    issueManager.createIssueObject(user, newIssueParams)
    subTaskManager.createSubTaskIssueLink(parentIssue, newSubTask, user)
    log.info "Subtask Issue with summary ${newSubTask.summary} created and assigned to ${developer.getDisplayName()}"
}
